#! /usr/bin/env python3

from abc import ABC, abstractmethod
import argparse
from math import cos, sin
from sys import argv

import rospy
from rospy.timer import TimerEvent
from tf.transformations import quaternion_from_euler

from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist


class SimpleRobot(ABC):
    def __init__(self, odom_pub_topic: str, cmd_vel_sub_topic: str, odom_durr: float):
        self.odom_pub = rospy.Publisher(odom_pub_topic, Odometry, queue_size=10)
        self.cmd_vel_sub = rospy.Subscriber(cmd_vel_sub_topic, Twist, self.cmd_vel_cb)

        self.last_twist = Twist()
        self.last_odom = Odometry()

        self.odom_pub_timer = rospy.Timer(rospy.Duration(odom_durr), self.__publish_odom)

    def cmd_vel_cb(self, msg: Twist):
        self.last_twist = msg

    @abstractmethod
    def update_state(self, msg: Twist, ts: float):
        pass

    def set_ros_state(self, msg: Odometry):
        self.last_odom = msg

    def __publish_odom(self, e: TimerEvent):
        if e.last_duration is None:
            return

        self.update_state(self.last_twist, e.last_duration)
        self.odom_pub.publish(self.last_odom)


class DiffDriveRobot(SimpleRobot):
    def __init__(self, odom_pub_topic: str, cmd_vel_sub_topic: str, odom_durr: float):
        super().__init__(odom_pub_topic, cmd_vel_sub_topic, odom_durr)
        
        self.state = [0, 0, 0]

    def update_state(self, msg: Twist, ts: float):
        self.state[0] += msg.linear.x * cos(msg.angular.z) * ts
        self.state[1] += msg.linear.x * sin(msg.angular.z) * ts
        self.state[2] += msg.angular.z * ts

        odom = Odometry()

        odom.pose.pose.position.x = self.state[0]
        odom.pose.pose.position.y = self.state[1]

        rx, ry, rz, rw = quaternion_from_euler(0, 0, self.state[2])

        odom.pose.pose.orientation.x = rx
        odom.pose.pose.orientation.y = ry
        odom.pose.pose.orientation.z = rz
        odom.pose.pose.orientation.w = rw

        self.set_ros_state(odom)

if __name__ == "__main__":
    odom_topic = rospy.get_param("odom_topic", "/odom")
    cmd_vel_topic = rospy.get_param("cmd_vel_topic", "/cmd_vel")
    atype = rospy.get_param("type", "DD")
    freq = rospy.get_param("freq", 60.0)

    rospy.init_node("simple_robot", anonymous=True)

    if atype == "DD":
        rospy.logdebug("Made diff drive robot.")
        robot = DiffDriveRobot(
            odom_topic,
            cmd_vel_topic,
            1 / freq
        )

    rospy.spin()
