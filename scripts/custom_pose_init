#!/usr/bin/env python
import rospy
import tf
import tf.transformations
from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped
from geometry_msgs.msg import Quaternion
import numpy as np
import math as m
import time

rospy.init_node("pose_initializer")
N = 2  # number of agents you have 

def angle_to_quaternion(angle):
    """
    Convert an angle in radians into a quaternion _message_.

    Params:
        angle in radians
    Returns:
        quaternion (unit quaternion)
    """
    return Quaternion(*tf.transformations.quaternion_from_euler(0, 0, angle))

pub = []

for i in range(N):
    publisher = rospy.Publisher("/car" + str(i + 1) + "/initialpose", PoseWithCovarianceStamped, queue_size=1)
    pub.append(publisher)

now = rospy.Time.now()
cur_pose = PoseWithCovarianceStamped()
cur_pose.header.frame_id = "/map"
cur_pose.header.stamp = now

pose_list = []
pose_list.append([3.5, 2, m.pi])
pose_list.append([2.5, 3, m.pi])

pose_list = np.array(pose_list)

time.sleep(4)

for i in range(N):
    print(pose_list[i,0], pose_list[i, 1])
    cur_pose.pose.pose.position.x = pose_list[i, 0]
    cur_pose.pose.pose.position.y = pose_list[i, 1]
    cur_pose.pose.pose.position.z = 0.0
    cur_pose.pose.pose.orientation = angle_to_quaternion(pose_list[i, 2])
    pub[i].publish(cur_pose)